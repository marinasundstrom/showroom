@page "/gallery"
@layout MainLayout
@using Showroom.Server.Client
@using Showroom.Client.Services
@inject IUserClient UserClient
@inject IOrganizationsClient OrganizationsClient
@inject ICompetenceAreasClient CompetenceAreasClient
@inject IConsultantGalleryClient ConsultantGalleryClient
@inject NavigationManager NavigationManager
@inject AutoMapper.IMapper Mapper
@inject IJSHelpers JSHelpers
@attribute [Authorize]

<Loader Task="@task">
    <section class="jumbotron text-center">
        <div class="container">
            <h1 class="jumbotron-heading">Consultants</h1>
            <p class="lead text-muted">Our available consultants</p>
        </div>
    </section>

    <div class="album py-5 bg-light">

        <div class="container" style="margin-right: auto; margin-left: auto;">

            @if (organizations != null)
            {
                <div class="row" style="margin-bottom: 30px">
                    <div class="col-md-4 mb-3">
                        <label for="organization">Organization</label>
                        <ListBox TValue="Models.ListItem"
                                 Placeholder="Organization"
                                 Items="@organizations.ToList().AsReadOnly()"
                                 SelectedItem="organization"
                                 SelectedItemChanged="@(async org =>
                                                        {
                                                            organization = org;
                                                            await UpdateFilter();
                                                        })"
                                 IsEditable="false"
                                 Query="@(async (input, items) =>
                                         {
                                                if (string.IsNullOrEmpty(input))
                                                {
                                                    return items;
                                                }
                                             return items.Where(item => item.Name.ToLower().Contains(input.ToLower()));
                                         })">
                            <ItemTemplate Context="item">
                                @item.Name
                            </ItemTemplate>
                        </ListBox>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="organization">Competence Area</label>
                        <ListBox TValue="Models.ListItem"
                                 Placeholder="Competence Area"
                                 Items="@competenceAreas.ToList().AsReadOnly()"
                                 SelectedItem="competenceArea"
                                 SelectedItemChanged="@(async org =>
                                                        {
                                                            competenceArea = org;
                                                            await UpdateFilter();
                                                        })"
                                 IsEditable="false"
                                 Query="@(async (input, items) =>
                                         {
                                                if (string.IsNullOrEmpty(input))
                                                {
                                                    return items;
                                                }
                                             return items.Where(item => item.Name.ToLower().Contains(input.ToLower()));
                                         })">
                            <ItemTemplate Context="item">
                                @item.Name
                            </ItemTemplate>
                        </ListBox>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="organization">Available from</label>
                        <input class="form-control" type="date" value="@availableFrom?.ToString("yyyy-MM-dd")" @onchange="@(async e => {
                                                                                                                                availableFrom = string.IsNullOrEmpty((string)e.Value) ? (DateTime?)null : DateTime.Parse((string)e.Value);
                                                                                                                                await UpdateFilter();
                                                                                                                            })"
                               min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <button class="btn btn-secondary" @onclick="ClearFilter"><i class="oi oi-x"></i> Clear</button>
                    </div>
                </div>
            }

            <div class="row">
                @foreach (var consultant in consultants)
                {
                    <div class="col-md-4 mb-4">
                        <ConsultantCard class="card mb-4 box-shadow animated fadeIn faster" Consultant="@consultant" Href="@($"/consultants/{consultant.Id}")" />
                    </div>
                }

                @if (consultants.Any() && consultants.Count() < total) 
                {
                        <div class="col text-center">
                            <button class="btn btn-secondary btn-block mx-auto" @onclick="LoadMore">Load more</button>
                        </div>
                }
            </div>
        </div>

    </div>
</Loader>