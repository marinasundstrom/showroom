@page "/consultants/{Id}"
@layout MainLayout
@implements IDisposable
@using Showroom.Server.Client
@using Showroom.Client.Services
@using Showroom.Shared
@inject IConsultantProfilesClient ConsultantProfilesClient
@inject IClientProfilesClient ClientProfilesClient
@inject IConsultantRecommendationsClient ConsultantRecommendationsClient
@inject IClientConsultantInterestsClient ClientConsultantInterestsClient
@inject Services.IJSHelpers jsHelpers
@inject IJSHelpers JSHelpers
@attribute [Authorize]

<Modal @ref="recommendationModal">
    <EditForm Model="@presentationForm" OnValidSubmit="@OnPresentSubmit">
        <ModalHeader>
            <h5 class="modal-title">Present <NameDisplay FirstName="@consultantProfile.FirstName" DisplayName="@consultantProfile.DisplayName" ShowFirstName="true" /> to client</h5>
            <button type="button" class="btn close" @onclick="recommendationModal.Close">×</button>
        </ModalHeader>
        <ModalBody>
            <div class="row">
                <div class="col-md mb-3">
                    <label for="competenceArea">Client</label>
                    <InputSelect2 class="form-control" @bind-Value="presentationForm.ClientId">
                        <option value="">Select a Client...</option>
                        @if (clients != null)
                        {
                            @foreach (var client in clients)
                            {
                                <option value="@client.Id"><NameDisplay FirstName="@client.FirstName" LastName="@client.LastName" DisplayName="@client.DisplayName" /> (@client.Company)</option>
                            }
                        }
                    </InputSelect2>
                    <ValidationMessage For="@(() => presentationForm.ClientId)"></ValidationMessage>
                </div>
            </div>
            <div class="row">
                <div class="col-md mb-3">
                    <label for="text">Message <span class="text-muted">(Optional)</span></label>
                    <InputMarkdownEditor class="form-control" @bind-Value="presentationForm.Text" />
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <button class="btn btn-secondary" @onclick="@recommendationModal.Close">Cancel</button>
            <button type="submit" class="btn btn-primary">Present</button>
        </ModalFooter>
    </EditForm>
</Modal>

<Modal @ref="interestModal">
    <EditForm Model="@interestForm" OnValidSubmit="@OnInterestSubmit">
        <ModalHeader>
            <h5 class="modal-title">Confirm interest in <NameDisplay FirstName="@consultantProfile.FirstName" DisplayName="@consultantProfile.DisplayName" ShowFirstName="true" /></h5>
            <button type="button" class="btn close" @onclick="interestModal.Close">×</button>
        </ModalHeader>
        <ModalBody>
            <div class="row">
                <div class="col-md mb-3">
                    <label for="text">Message <span class="text-muted">(Optional)</span></label>
                    <InputMarkdownEditor class="form-control" @bind-Value="interestForm.Text" />
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <button class="btn btn-secondary" @onclick="@(() =>interestModal.Close())">Cancel</button>
            <button type="submit" class="btn btn-primary">Confirm</button>
        </ModalFooter>
    </EditForm>
</Modal>

<Loader Task="task">
    <section class="jumbotron text-center">
        <div class="buttonmenu">
            <AuthorizeView Roles="@RoleConstants.AdministratorAndManager">
                <a class="btn" href="/consultants/edit/@consultantProfile.Id"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a>
            </AuthorizeView>
            <AuthorizeView Roles="@RoleConstants.Manager">
                <a class="btn btn-primary" @onclick="@(() => recommendationModal.Show())"><span class="oi oi-share" aria-hidden="true"></span> Present to client</a>
            </AuthorizeView>

            <AuthorizeView Roles="@RoleConstants.Client">
                <a class="btn btn-primary" @onclick="@(() => interestModal.Show())"><span class="oi oi-thumb-up" aria-hidden="true"></span> I'm interested</a>
            </AuthorizeView>
        </div>
        <div class="container">

                <ProfileImage ImagePath="@consultantProfile.ProfileImage"
                              FirstName="@consultantProfile.FirstName"
                              LastName="@consultantProfile.LastName" />

                <h1 class="jumbotron-heading">

                    <NameDisplay FirstName="@consultantProfile.FirstName"
                                 MiddleName="@consultantProfile.MiddleName"
                                 LastName="@consultantProfile.LastName"
                                 DisplayName="@consultantProfile.DisplayName" />

                </h1>
                @if (!string.IsNullOrEmpty(consultantProfile.Headline))
                {
                    <p class="lead text-muted">@consultantProfile.Headline</p>
                }
        </div>
    </section>

    <div class="py-5 bg-light">

        <div class="container">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <dl class="dl-horizontal">
                        <dt>Region</dt>
                        <dd>@consultantProfile.Organization.Name</dd>
                        <dt>Competence Area</dt>
                        <dd>@consultantProfile.CompetenceArea.Name</dd>
                        @if (consultantProfile.AvailableFromDate != null)
                        {
                            <dt>Available</dt>
                            <dd>
                                @if (consultantProfile.AvailableFromDate?.DateTime.Date > DateTime.Now.Date)
                                {
                                    <span>@consultantProfile.AvailableFromDate?.DateTime.Date.ToString("yyyy/MM/dd")</span>
                                }
                                else
                                {
                                    <span>Immediately</span>
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrEmpty(consultantProfile.PhoneNumber))
                        {
                            <dt>Phone</dt>
                            <dd><a href="tel:@consultantProfile.PhoneNumber">@consultantProfile.PhoneNumber</a></dd>
                        }
                        @if (!string.IsNullOrEmpty(consultantProfile.Email))
                        {
                            <dt>Email</dt>
                            <dd><a href="mailto:@consultantProfile.Email">@consultantProfile.Email</a></dd>
                        }
                    </dl>

                    @if (!string.IsNullOrEmpty(consultantProfile.Email))
                    {
                        <h3>Presentation</h3>
                        <MarkdownView Content="@consultantProfile.Presentation"></MarkdownView>
                    }
                </div>
                <div class="col-md-6 mb-3">
                    @if (!string.IsNullOrEmpty(consultantProfile.ProfileVideo))
                    {
                        <video style="width: 100%" controls>
                            <source src="@consultantProfile.ProfileVideo" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                </div>
            </div>

            @*<h3>Presentation</h3>
                <MarkdownView Content="@consultantProfile.Presentation"></MarkdownView>*@

            <div class="row">
                <div class="container">
                    <h3>Manager</h3>

                    <div class="card" style="padding: 15px; max-width: 320px">
                        <div class="row no-gutters">
                            <div class="col-auto">
                                <div class="img-fluid" alt="">
                                    <div class="img-circle float-left" style="height: 80px; width: 80px; background-image: url('@consultantProfile.Manager.ProfileImage')" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="card-block px-2">
                                    <h4 class="card-title">
                                        <a href="/managers/@consultantProfile.Manager.Id">
                                            <NameDisplay FirstName="@consultantProfile.Manager.FirstName"
                                                         MiddleName="@consultantProfile.Manager.MiddleName"
                                                         LastName="@consultantProfile.Manager.LastName"
                                                         DisplayName="@consultantProfile.Manager.DisplayName" />
                                        </a>
                                    </h4>
                                    <p class="card-text">@consultantProfile.Manager.Headline</p>
                                    <p><a href="tel:@consultantProfile.Manager.PhoneNumber">@consultantProfile.Manager.PhoneNumber</a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>
</Loader>

@code {
    Task task;

    async Task OnPresentSubmit()
    {
        try
        {
            await ConsultantRecommendationsClient.PostConsultantRecommendationAsync(new RecommendConsultantCommand()
            {
                ClientId = Guid.Parse(presentationForm.ClientId),
                ConsultantId = Guid.Parse(Id),
                Message = presentationForm.Text
            }); ;
            await recommendationModal.Close();
        }
        catch (ApiException<ProblemDetails> exc)
        {
            await JSHelpers.Alert(exc.Result.Detail);
        }
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.StackTrace);
        }
    }

    class PresentationForm
    {
        public string ClientId { get; set; }

        public string Text { get; set; }
    }

    PresentationForm presentationForm = new PresentationForm();
    PresentationForm interestForm = new PresentationForm();

    private Modal recommendationModal;
    private Modal interestModal;

    ConsultantProfile consultantProfile;
    IEnumerable<ClientProfile> clients;

    [Parameter]
    public string Id { get; set; }

    protected override void OnInitialized()
    {
        task = OnInitialize();
    }

    private async Task OnInitialize()
    {
        try
        {
            clients = await ClientProfilesClient.GetClientProfilesAsync(null);
        }
        /*catch (ApiException exc)
        {

        }
        catch (HttpRequestException exc)
        {

        }*/
        catch (Exception exc)
        {
        }

        try
        {
            consultantProfile = await ConsultantProfilesClient.GetConsultantProfileAsync(Guid.Parse(Id));

            await jsHelpers.SetTitle($"{consultantProfile.FirstName} {consultantProfile.LastName} - ESSIQ Showroom");
        }
        /*catch (ApiException exc)
        {

        }
        catch (HttpRequestException exc)
        {

        }*/
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.Message);
        }
    }

    public async void Dispose()
    {
        await jsHelpers.SetTitle("ESSIQ Showroom");
    }

    private async Task OnInterestSubmit()
    {
        try
        {
            await ClientConsultantInterestsClient.ShowInterestAsync(new ShowInterestCommand()
            {
                ConsultantId = consultantProfile.Id,
                Message = interestForm.Text,
                //Date = DateTime.Now
            });
            await interestModal.Close();
        }
        catch (ApiException<ProblemDetails> exc)
        {
            await JSHelpers.Alert(exc.Result.Detail);
        }
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.StackTrace);
        }
    }
}
